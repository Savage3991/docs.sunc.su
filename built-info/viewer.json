{
  "makefolder":"makefolder creates a folder at the specified path if one does not already exist.",
  "writefile":"writefile writes data to a file at the specified path. If the file already exists, its contents will be overwritten.",
  "debug.setconstant":"debug.setconstant modifies a constant at the specified index in a Luau function bytecode.",
  "cloneref":"cloneref returns a reference clone of an Instance. The returned object behaves identically to the original but is not strictly equal (==) to it.",
  "debug.getconstants":"debug.getconstants returns a list of all constants used within a Luau function's bytecode. This includes literal values like numbers, strings, booleans, and nil.",
  "compareinstances":"compareinstances checks if two Instances are equal.",
  "debug.getstack":"debug.getstack retrieves values from the stack at the specified call level.",
  "fireclickdetector":"fireclickdetector triggers a ClickDetector event. By default, it fires the MouseClick event.",
  "fireproximityprompt":"fireproximityprompt instantly triggers a ProximityPrompt, bypassing its HoldDuration and activation distance.",
  "crypt.base64encode":"crypt.base64encode encodes a string with Base64 encoding.",
  "firetouchinterest":"firetouchinterest simulates a physical touch event between two BasePart objects. It can emulate both the start and end of a Touched event.",
  "debug.getconstant":"debug.getconstant returns the constant at the specified index from a Luau function. If no constant exists at that index, it returns nil instead.",
  "checkcaller":"checkcaller returns a boolean indicating whether the current function was invoked from the executor's own thread. This is useful for differentiating between your own calls and those made by the game.",
  "getcallbackvalue":"getcallbackvalue retrieves the assigned callback property on an Instance, such as OnInvoke.",
  "clonefunction":"clonefunction creates and returns a new function that has the exact same behaviour as the passed function.",
  "gethui":"gethui returns a hidden Instance container used for safely storing UI elements. This container is mainly designed to avoid detections.",
  "debug.getupvalue":"debug.getupvalue returns the upvalue at the specified index from a Luau function's closure. If the index is invalid or out of bounds, an error will occur.",
  "getfunctionhash":"getfunctionhash returns the hex-represented SHA384 hash of a provided function's instructions (code) and constants.",
  "getinstances":"getinstances retrieves every Instance from the registry. Which means that instances that are/were parented to nil will also be returned.",
  "hookfunction":"hookfunction allows you to hook a function with another wanted function, returning the original unhooked function.",
  "getnilinstances":"getnilinstances returns a list of Instance objects that are currently unparented. These instances exist in memory but are no longer part of the DataModel hierarchy.",
  "setscriptable":"setscriptable toggles the scriptability of a hidden or non-scriptable property on an Instance. When a property is made scriptable, it can be accessed or assigned through standard indexing.",
  "request":"request sends a HTTP request to the given URL using the provided configuration table. It yields until the request is complete and returns a structured response.",
  "debug.getprotos":"debug.getprotos returns all function prototypes defined within the specified Luau function.",
  "setthreadidentity":"setthreadidentity sets the current Luau thread identity and capabilities matching that identity.",
  "iscclosure":"iscclosure checks whether a given function is a C closure or not.",
  "getrawmetatable":"getrawmetatable returns the raw metatable of an object, even if that object has a metatable field set.",
  "isexecutorclosure":"isexecutorclosure checks whether a given function is a closure of the executor. This also includes closures retrieved using getscriptclosure or loadstring",
  "isreadonly":"isreadonly checks whether a table is currently set as readonly.",
  "cleardrawcache":"cleardrawcache removes all active drawing objects created with Drawing.new.",
  "getcallingscript":"getcallingscript returns the Script, LocalScript, or ModuleScript that triggered the current code execution.",
  "islclosure":"islclosure checks whether a given function is a Luau closure or not.",
  "debug.setupvalue":"debug.setupvalue replaces an upvalue at the specified index in a Luau function, with a new value.",
  "getrenderproperty":"getrenderproperty retrieves the value of a property from a Drawing object. This behaves identically to using object[property], but is useful when working with dynamic property names or for reflection-like access.",
  "getloadedmodules":"getloadedmodules returns a list of all ModuleScript instances that have been loaded (e.g. require'd).",
  "newcclosure":"newcclosure takes any Luau function and wraps it into a C closure.",
  "setreadonly":"setreadonly sets whether a table is readonly or writable.",
  "isrenderobj":"isrenderobj checks whether a given value is a valid Drawing object.",
  "getrunningscripts":"getrunningscripts returns a list of all running scripts in the caller's global state. This includes Script, LocalScript, and ModuleScript instances - excluding CoreScripts by default.",
  "setrenderproperty":"setrenderproperty assigns a value to a property of a Drawing object. This behaves identically to object[property] = value, but is useful for dynamic or abstracted property access.",
  "getscriptbytecode":"getscriptbytecode retrieves the bytecode of a LocalScript, ModuleScript, and Script.",
  "debug.getupvalues":"debug.getupvalues returns a list of upvalues captured by a Luau function. These are the external variables that a function closes over from its surrounding scope.",
  "identifyexecutor":"identifyexecutor returns the name and version of the currently running executor.",
  "getscriptclosure":"getscriptclosure creates and returns a Luau function closure from the compiled bytecode of a Script, LocalScript, or ModuleScript.",
  "getgc":"getgc returns a list of non-dead garbage-collectable values. These include functions, userdatas, and optionally tables.",
  "getgenv":"getgenv returns the executor's global environment table, which is shared across all executor-made threads.",
  "gethiddenproperty":"gethiddenproperty retrieves the value of a hidden or non-scriptable property (e.g. BinaryString, SharedString, SystemAddress) from a given Instance, even if it would normally throw an error when accessed directly.",
  "getrenv":"getrenv returns the Roblox global environment, which is used by the entire game. Changes to this environment will affect your executor environment as well.",
  "getthreadidentity":"getthreadidentity retrieves the thread's identity of the running Luau thread.",
  "debug.setstack":"debug.setstack replaces a value in a specified stack frame.",
  "sethiddenproperty":"sethiddenproperty assigns a value to a hidden or non-scriptable property of an Instance, even if that property is normally read-only or inaccessible.",
  "appendfile":"appendfile appends string content to the end of a file at the specified path. If the file does not exist, it will be created.",
  "readfile":"readfile retrieves the contents of a file at the specified path and returns it as a string.",
  "delfile":"delfile deletes the file at the specified path if it exists.",
  "firesignal":"firesignal Invokes all Luau connections connected to a given RBXScriptSignal.",
  "delfolder":"delfolder deletes the folder at the specified path if it exists.",
  "getconnections":"getconnections retrieves a list of Connection objects currently attached to a given RBXScriptSignal.",
  "crypt.base64decode":"crypt.base64decode decodes a Base64-encoded string back into its original form.",
  "loadfile":"loadfile compiles the Luau source code from a file and returns the resulting function (chunk). This chunk runs in the global environment.",
  "replicatesignal":"replicatesignal replicates a signal to the server with the provided arguments, if possible. The arguments must also match accordingly to the signal itself. To know a signal's arguments, visit this.",
  "loadstring":"loadstring compiles a string of Luau code and returns it as a runnable function. If the code has errors, nil is returned and an error message is output.",
  "getsenv":"getsenv returns the global environment table of a given Script, LocalScript, or ModuleScript.",
  "isfile":"isfile checks whether a given path exists and refers to a file.",
  "getscripthash":"getscripthash returns a hexadecimal format SHA-384 hash of the raw bytecode for a given Script, LocalScript, or ModuleScript.",
  "getscripts":"getscripts returns a list of all Script, LocalScript, and ModuleScript instances present.",
  "debug.getproto":"debug.getproto returns a specific function prototype from a Luau function by index. Optionally, it can search for active functions of the proto, if the activated parameter is set to true.",
  "isfolder":"isfolder checks whether a given path exists and refers to a folder.",
  "setrawmetatable":"setrawmetatable forcibly sets the metatable of a value, bypassing the metatable protection field.",
  "getcustomasset":"getcustomasset returns a content ID (e.g. rbxasset://) that can be used in Roblox APIs for loading audio, meshes, UI images, and other asset types.",
  "hookmetamethod":"hookmetamethod takes any Luau object that can have a metatable, and attempts to hook the specified metamethod of the object. Internally, it essentially uses hookfunction to hook specific metamethods.",
  "listfiles":"listfiles returns an array of strings representing all files and folders within the specified directory."
}